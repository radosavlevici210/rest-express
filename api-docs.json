{
  "openapi": "3.0.0",
  "info": {
    "title": "REST Express API",
    "version": "2.0.0",
    "description": "A production-ready REST API with comprehensive CRUD operations, security, and monitoring",
    "contact": {
      "name": "API Support",
      "url": "https://github.com/radosavlevici210/rest-express-api-production"
    },
    "license": {
      "name": "Proprietary with MIT base",
      "url": "https://github.com/radosavlevici210/rest-express-api-production/blob/main/LICENSE"
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "Production API"
    }
  ],
  "paths": {
    "/items": {
      "get": {
        "summary": "Get all items",
        "description": "Retrieve all items with optional filtering, searching, and pagination",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": ["General", "Work", "Personal", "Shopping"]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search in name and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Item" }
                    },
                    "pagination": { "$ref": "#/components/schemas/Pagination" }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new item",
        "description": "Create a new item with validation",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateItem" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/Item" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "summary": "Get item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Item found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": { "$ref": "#/components/schemas/Item" }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Item not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateItem" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "delete": {
        "summary": "Delete item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "Item deleted successfully"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "summary": "Get all categories",
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": { "type": "string" }
                    },
                    "count": { "type": "integer" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stats": {
      "get": {
        "summary": "Get API statistics",
        "responses": {
          "200": {
            "description": "API usage statistics"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Item": {
        "type": "object",
        "properties": {
          "id": { "type": "integer" },
          "name": { "type": "string" },
          "description": { "type": "string", "nullable": true },
          "category": { "type": "string" },
          "completed": { "type": "boolean" },
          "priority": { "type": "string", "enum": ["low", "medium", "high"] },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" }
        }
      },
      "CreateItem": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 100 },
          "description": { "type": "string" },
          "category": { "type": "string", "enum": ["General", "Work", "Personal", "Shopping"] },
          "priority": { "type": "string", "enum": ["low", "medium", "high"] },
          "completed": { "type": "boolean" }
        }
      },
      "UpdateItem": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "minLength": 1, "maxLength": 100 },
          "description": { "type": "string" },
          "category": { "type": "string", "enum": ["General", "Work", "Personal", "Shopping"] },
          "priority": { "type": "string", "enum": ["low", "medium", "high"] },
          "completed": { "type": "boolean" }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "currentPage": { "type": "integer" },
          "totalPages": { "type": "integer" },
          "totalItems": { "type": "integer" },
          "limit": { "type": "integer" },
          "hasNext": { "type": "boolean" },
          "hasPrev": { "type": "boolean" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "error": { "type": "string" },
          "message": { "type": "string" },
          "details": {
            "type": "array",
            "items": { "type": "string" }
          }
        }
      }
    }
  }
}